import { StreamAdapter } from '@cycle/base';
import { Observable } from 'rx';
import { TcombWebhookResponse, TcombUpdate } from '../runtime-types';
export * from './entities';
export declare function isWebhookResponse(request: Observable<Observable<any>>, options: any): request is Observable<Observable<TcombWebhookResponse>>;
export declare function isObservable<T>(o: any): o is Observable<T>;
export declare type StreamFunction = (...args: any[]) => Observable<any>;
export declare function convertStream(stream: any, sourceSA: StreamAdapter, targetSA: StreamAdapter): any;
export declare function adapter(runSA: StreamAdapter): (streamOrFunc: Observable<any> | StreamFunction) => any;
export declare function messageCase(update: TcombUpdate): TcombUpdate;
export declare let defaults: Function;
